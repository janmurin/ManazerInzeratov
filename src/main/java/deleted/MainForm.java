/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package deleted;

import home.managerinzeratov.Authenticator;
import home.managerinzeratov.Database;
import entity.Inzerat;
import entity.InzeratyTableModel;
import entity.MestaListModel;
import home.managerinzeratov.MySQLDatabase;
import entity.PortalyComboboxModel;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ListDataListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jsoup.nodes.Document;

/**
 *
 * @author Janco1
 */
public class MainForm extends javax.swing.JFrame {

    private Database database;
    private List<Inzerat> inzeraty;
    private String[] inzeratyTableColumnNames = {"názov", "dátum", "meno", "lokalita"};
    private InzeratyTableModel inzeratyTableModel;
    private List<String> mesta;
    private Authenticator authenticator = new Authenticator();
    private List<String> portaly;
    private ArrayList<Inzerat> tableInzeraty;
    private List<Inzerat> surneInzeraty;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        //SpustacDatabazy.execute();
        database = new Database();
        portaly = new ArrayList<String>();
        portaly.add("všetky");
        portaly.addAll(database.getPortalyNames());
        portalComboBox.setModel(new PortalyComboboxModel(portaly));
        pocetPovolenychInzeratovUserSpinner.setModel(new SpinnerNumberModel(2, 1, 10000, 1));
        noveDniSpinner.setModel(new SpinnerNumberModel(1, 1, 100, 1));
        surneInzeraty = database.getSurneInzeraty();
        portalComboBox.setSelectedIndex(0); // spustia sa vsetky refreshe

//        try {
//            String macaddress = "unknownMac";
//            Document authResponse = authenticator.increaseAndReturnPocet(getMacAddress(macaddress), -1, 1); // 1 je pre demo verziu, 0 lebo len chceme zistit pocet registracii
//
//            // naparsovat cislo
//            String text = "deefault Text";
//            text = authResponse.toString();
//            if (!text.startsWith("<!DOCTYPE html>")) {
//                JOptionPane.showMessageDialog(rootPane, "Vyskytla sa chyba, skontrolujte či ste pripojení k internetu: ");
////                    pridatButton.setEnabled(false);
////                    casTextField.setEnabled(false);
//            }
////                System.out.println("AUTH RESPONSE\n" + text);
////                String pocetText = "id=\"pocetInput\" class=\"txtBoxElem long\" value=";
////                int prvaUvodzovkaPos = text.indexOf(pocetText) + pocetText.length() + 1;
////                int druhaUvodzovkaPos = text.substring(prvaUvodzovkaPos).indexOf("\"") + prvaUvodzovkaPos;
////                pocetRegistracii = Integer.parseInt(text.substring(prvaUvodzovkaPos, druhaUvodzovkaPos));
////                // check ci sme dostali spravnu auth response
//        } catch (HeadlessException headlessException) {
//            JOptionPane.showMessageDialog(rootPane, "Vyskytla sa chyba, skontrolujte či ste pripojení k internetu: ");
//        } catch (NumberFormatException numberFormatException) {
//            JOptionPane.showMessageDialog(rootPane, "Vyskytla sa chyba, skontrolujte či ste pripojení k internetu: ");
//        } catch (NullPointerException nullPointerException) {
//            JOptionPane.showMessageDialog(rootPane, "Vyskytla sa chyba, skontrolujte či ste pripojení k internetu: ");
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nacitajInzeratyButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        inzeratyTable = new javax.swing.JTable();
        filtrePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pocetPovolenychInzeratovUserSpinner = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        mestoList = new javax.swing.JList();
        jLabel10 = new javax.swing.JLabel();
        portalComboBox = new javax.swing.JComboBox();
        surneCheckBox = new javax.swing.JCheckBox();
        nevideneCheckBox = new javax.swing.JCheckBox();
        videneCheckBox = new javax.swing.JCheckBox();
        vytlaceneCheckBox = new javax.swing.JCheckBox();
        noveCheckBox = new javax.swing.JCheckBox();
        noveDniSpinner = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textTextArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        urlLabel = new javax.swing.JLabel();
        nazovLabel = new javax.swing.JLabel();
        portalLabel = new javax.swing.JLabel();
        menoLabel = new javax.swing.JLabel();
        telefonLabel = new javax.swing.JLabel();
        lokalitaLabel = new javax.swing.JLabel();
        cenaLabel = new javax.swing.JLabel();
        linkTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        vybavenyButton = new javax.swing.JButton();
        dalsiButton = new javax.swing.JButton();
        predchadzajuciButton = new javax.swing.JButton();
        stiahniNoveButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        nacitajInzeratyButton.setText("Načítaj inzeráty");
        nacitajInzeratyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nacitajInzeratyButtonActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manažér realitných inzerátov");
        setMinimumSize(new java.awt.Dimension(881, 668));

        inzeratyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        inzeratyTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                inzeratyTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(inzeratyTable);

        filtrePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtre"));
        filtrePanel.setMaximumSize(new java.awt.Dimension(212, 690));
        filtrePanel.setMinimumSize(new java.awt.Dimension(212, 272));

        jLabel1.setText("1. Max. inzerátov od 1 osoby:");

        pocetPovolenychInzeratovUserSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pocetPovolenychInzeratovUserSpinnerStateChanged(evt);
            }
        });
        pocetPovolenychInzeratovUserSpinner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pocetPovolenychInzeratovUserSpinnerMouseReleased(evt);
            }
        });
        pocetPovolenychInzeratovUserSpinner.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                pocetPovolenychInzeratovUserSpinnerPropertyChange(evt);
            }
        });

        mestoList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        mestoList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        mestoList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mestoListMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(mestoList);

        jLabel10.setText("0. portál:");

        portalComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        portalComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portalComboBoxActionPerformed(evt);
            }
        });

        surneCheckBox.setSelected(true);
        surneCheckBox.setText("súrne");
        surneCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surneCheckBoxActionPerformed(evt);
            }
        });

        nevideneCheckBox.setSelected(true);
        nevideneCheckBox.setText("nevidené");
        nevideneCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nevideneCheckBoxActionPerformed(evt);
            }
        });

        videneCheckBox.setText("videné");
        videneCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videneCheckBoxActionPerformed(evt);
            }
        });

        vytlaceneCheckBox.setText("vytlačené");
        vytlaceneCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vytlaceneCheckBoxActionPerformed(evt);
            }
        });

        noveCheckBox.setSelected(true);
        noveCheckBox.setText("nové dní:");
        noveCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noveCheckBoxActionPerformed(evt);
            }
        });

        noveDniSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                noveDniSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout filtrePanelLayout = new javax.swing.GroupLayout(filtrePanel);
        filtrePanel.setLayout(filtrePanelLayout);
        filtrePanelLayout.setHorizontalGroup(
            filtrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtrePanelLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(filtrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(filtrePanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(filtrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(filtrePanelLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(portalComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(filtrePanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 21, Short.MAX_VALUE))
                            .addGroup(filtrePanelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(filtrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(filtrePanelLayout.createSequentialGroup()
                                        .addGroup(filtrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(videneCheckBox)
                                            .addComponent(nevideneCheckBox)
                                            .addComponent(surneCheckBox))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(filtrePanelLayout.createSequentialGroup()
                                        .addComponent(noveCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(noveDniSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filtrePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(pocetPovolenychInzeratovUserSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(filtrePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vytlaceneCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        filtrePanelLayout.setVerticalGroup(
            filtrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtrePanelLayout.createSequentialGroup()
                .addGroup(filtrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(portalComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pocetPovolenychInzeratovUserSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(surneCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filtrePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noveCheckBox)
                    .addComponent(noveDniSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nevideneCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(videneCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vytlaceneCheckBox)
                .addGap(6, 6, 6))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Aktuálny inzerát", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        jLabel3.setText("Názov:");

        jLabel4.setText("Portal:");

        textTextArea.setColumns(20);
        textTextArea.setLineWrap(true);
        textTextArea.setRows(5);
        jScrollPane3.setViewportView(textTextArea);

        jLabel5.setText("Meno:");

        jLabel6.setText("Telefon:");

        jLabel7.setText("Lokalita:");

        jLabel8.setText("Cena:");

        urlLabel.setText("Url:");

        nazovLabel.setText("názov");

        portalLabel.setText("portal");

        menoLabel.setText("meno");

        telefonLabel.setText("telefon");

        lokalitaLabel.setText("lokalita");

        cenaLabel.setText("cena");

        vybavenyButton.setText("Označiť ako nezaujímavý");
        vybavenyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vybavenyButtonActionPerformed(evt);
            }
        });

        dalsiButton.setText("Ďalší ");
        dalsiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dalsiButtonActionPerformed(evt);
            }
        });

        predchadzajuciButton.setText("Predchádzajúci");
        predchadzajuciButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predchadzajuciButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(vybavenyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(predchadzajuciButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dalsiButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(vybavenyButton)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dalsiButton)
                    .addComponent(predchadzajuciButton))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(jLabel6)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jLabel7)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(urlLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nazovLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(portalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(menoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(telefonLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lokalitaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                                    .addComponent(cenaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(linkTextField))))
                .addGap(9, 9, 9))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nazovLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(portalLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(menoLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(telefonLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(lokalitaLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cenaLabel)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(linkTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(urlLabel))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        stiahniNoveButton.setText("Aktualizovať");
        stiahniNoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stiahniNoveButtonActionPerformed(evt);
            }
        });

        exportButton.setText("Vytlačiť");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(filtrePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(exportButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(stiahniNoveButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filtrePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stiahniNoveButton)
                    .addComponent(exportButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nacitajInzeratyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nacitajInzeratyButtonActionPerformed
    }//GEN-LAST:event_nacitajInzeratyButtonActionPerformed

    private void pocetPovolenychInzeratovUserSpinnerMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pocetPovolenychInzeratovUserSpinnerMouseReleased
    }//GEN-LAST:event_pocetPovolenychInzeratovUserSpinnerMouseReleased

    private void pocetPovolenychInzeratovUserSpinnerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_pocetPovolenychInzeratovUserSpinnerPropertyChange
    }//GEN-LAST:event_pocetPovolenychInzeratovUserSpinnerPropertyChange

    private void mestoListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mestoListMouseReleased
        //    System.out.println("mestoListMouseReleased");
        refreshCheckboxesNames();
    }//GEN-LAST:event_mestoListMouseReleased

    private void vybavenyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vybavenyButtonActionPerformed
        // zaujimavy inzerat sa stane nezaujimavym
        // musime updatnut inzeraty, tableInzeraty, databazu
        // refresh mesta, checkboxy, inzeratyTable
        tableInzeraty.get(inzeratyTable.getSelectedRow()).setZaujimavy(false);
        //     System.out.println("inzerat "+ tableInzeraty.get(inzeratyTable.getSelectedRow()).getNazov()+" je zaujimavy?: "+tableInzeraty.get(inzeratyTable.getSelectedRow()).isZaujimavy());
        database.updateInzerat(tableInzeraty.get(inzeratyTable.getSelectedRow()));
        updateInzeraty(tableInzeraty.get(inzeratyTable.getSelectedRow()));
        refreshMestaList();
    }//GEN-LAST:event_vybavenyButtonActionPerformed

    private void dalsiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dalsiButtonActionPerformed
        int row = inzeratyTable.getSelectedRow();
        Inzerat aktualny = tableInzeraty.get(inzeratyTable.getSelectedRow());
        aktualny.setPocetZobrazeni(aktualny.getPocetZobrazeni() + 1);
        database.updateInzerat(aktualny);
        if (row < tableInzeraty.size() - 1) {
            row++;
            inzeratyTable.getSelectionModel().setSelectionInterval(row, row);
        }
        refreshInzeratDisplayed();
    }//GEN-LAST:event_dalsiButtonActionPerformed

    private void predchadzajuciButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predchadzajuciButtonActionPerformed
        int row = inzeratyTable.getSelectedRow();
        Inzerat aktualny = tableInzeraty.get(inzeratyTable.getSelectedRow());
        aktualny.setPocetZobrazeni(aktualny.getPocetZobrazeni() + 1);
        database.updateInzerat(aktualny);
        if (row > 0) {
            row--;
            inzeratyTable.getSelectionModel().setSelectionInterval(row, row);
        }
        refreshInzeratDisplayed();
    }//GEN-LAST:event_predchadzajuciButtonActionPerformed

    private void pocetPovolenychInzeratovUserSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pocetPovolenychInzeratovUserSpinnerStateChanged
        String aktPortal = (String) portalComboBox.getSelectedItem();
        int aktPocet = (Integer) pocetPovolenychInzeratovUserSpinner.getValue();
        inzeraty = database.getInzeratyList(aktPortal, aktPocet);
        Collections.sort(inzeraty);
        Collections.reverse(inzeraty);
        refreshMestaList();
    }//GEN-LAST:event_pocetPovolenychInzeratovUserSpinnerStateChanged

    private void inzeratyTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inzeratyTableMouseReleased
        Inzerat aktualny = tableInzeraty.get(inzeratyTable.getSelectedRow());
        aktualny.setPocetZobrazeni(aktualny.getPocetZobrazeni() + 1);
        database.updateInzerat(aktualny);
        updateInzeraty(aktualny);
        refreshInzeratDisplayed();
    }//GEN-LAST:event_inzeratyTableMouseReleased

    private void stiahniNoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stiahniNoveButtonActionPerformed
        MySQLDatabase msd = new MySQLDatabase("","","");
        // vymazeme stare nase
        List<Integer> aktualneIDs = null;
        try {
            //aktualneIDs = msd.getInzeratyIDs();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Vyskytla sa chyba. Skontrolujte vaše pripojenie k internetu.");
            return;
        }
        //database.deleteInzeratyWithIDNotIn(aktualneIDs);
        System.out.println("zmazane neaktualne inzeraty");
        // stiahneme nove
        String lastTimeInserted = "";//database.getLastTimeInserted();
        System.out.println("last time inserted v nasej databaze je: " + lastTimeInserted);
        List<Integer> noveInzeratyIDs = null;
        try {
            noveInzeratyIDs = msd.getInzeratyIDsFromLastTimeInserted(lastTimeInserted);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Vyskytla sa chyba. Skontrolujte vaše pripojenie k internetu.");
            return;
        }

        System.out.println("downloading from remote server db count:" + noveInzeratyIDs.size());
        if (noveInzeratyIDs.size() == 0) {
            System.out.println("ziadne nove inzeraty nenajdene");
            JOptionPane.showMessageDialog(portalComboBox, "Nenašli sa žiadne nové inzeráty.");
            return;
        } else {
            System.out.println("nasli sa nove inzeraty");
        }
        List<Inzerat> fromServer = new ArrayList<Inzerat>();
        List<Integer> idsToDownload = new ArrayList<Integer>();
        long startTime2 = System.currentTimeMillis();
        for (int i = 0; i < noveInzeratyIDs.size(); i++) {
            if (idsToDownload.size() < 5000) {
                idsToDownload.add(noveInzeratyIDs.get(i));
            } else {
                List<Inzerat> down = null;
                try {
                    down = msd.getInzeratyListFromIDs(idsToDownload);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Vyskytla sa chyba. Skontrolujte vaše pripojenie k internetu.");
                    return;
                }
                for (Inzerat inz:down){
                    if (inz.isSurne()){
                        System.out.println("dostal som surny inzerat zo servera");
                    }
                }
                database.inzertInzeraty(down);
                System.out.print("downloaded " + i + "/" + noveInzeratyIDs.size() + " ");
                printETATime(startTime2, i, noveInzeratyIDs.size());
                idsToDownload = new ArrayList<Integer>();
            }
        }
        List<Inzerat> down = null;
        try {
            down = msd.getInzeratyListFromIDs(idsToDownload);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Vyskytla sa chyba. Skontrolujte vaše pripojenie k internetu.");
            return;
        }
        database.inzertInzeraty(down);

        // moze sa stat ze niektore inzeraty tam nedosli
        // spytame sa ktore tam dosli a znova posielame tie co nedosli
        boolean vsetkyDosli = false;
        while (!vsetkyDosli) {
            // zistime idcka ktore sa nepodarilo stiahnut zo servera
            // stiahneme postupne idcka ktore sa nam nevlozili do DB

            // najprv zistime ktore z novych inzeratov su v databaze
            List<Integer> noveInzeratyVlozeneIDs = database.getInzeratyIDsFrom(noveInzeratyIDs);
            if (noveInzeratyVlozeneIDs.size() == noveInzeratyIDs.size()) {
                System.out.println("vsetky inzeraty dosli");
                break;
            }
            // vytvorime zoznam nedoslych inzeratov
            List<Integer> nedosleIDcka = new ArrayList<Integer>();
            for (Integer idcko : noveInzeratyIDs) {
                if (!noveInzeratyVlozeneIDs.contains(idcko)) {
                    nedosleIDcka.add(idcko);
                }
            }
            System.out.println("nedoslo " + nedosleIDcka.size() + ", stahujem znova");
            startTime2 = System.currentTimeMillis();
            idsToDownload = new ArrayList<Integer>();
            for (int i = 0; i < nedosleIDcka.size(); i++) {
                if (idsToDownload.size() < 5000) {
                    idsToDownload.add(nedosleIDcka.get(i));
                } else {
                    down = null;
                    try {
                        down = msd.getInzeratyListFromIDs(idsToDownload);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(rootPane, "Vyskytla sa chyba. Skontrolujte vaše pripojenie k internetu.");
                        return;
                    }
                    database.inzertInzeraty(down);
                    System.out.print("downloaded " + i + "/" + nedosleIDcka.size() + " ");
                    printETATime(startTime2, i, nedosleIDcka.size());
                    idsToDownload = new ArrayList<Integer>();
                }
            }
            down = null;
            try {
                down = msd.getInzeratyListFromIDs(idsToDownload);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Vyskytla sa chyba. Skontrolujte vaše pripojenie k internetu.");
                return;
            }
            database.inzertInzeraty(down);
        }
        System.out.println("vsetky inzeraty dosli");
        surneInzeraty = database.getSurneInzeraty();
        JOptionPane.showMessageDialog(portalComboBox, "Našlo sa " + noveInzeratyIDs.size() + " nových inzerátov.");
        portalComboBoxActionPerformed(evt);
//        List<Inzerat> noveInzeraty = msd.getInzeratyTimeInsertedLast(lastTimeInserted);
//        System.out.println("nasli sa nove inzeraty: " + noveInzeraty.size());
//        JOptionPane.showMessageDialog(rootPane, "Naslo sa " + noveInzeraty.size() + " novych inzeratov.");
//        database.inzertInzeraty(noveInzeraty);
//        pocetPovolenychInzeratovUserSpinnerStateChanged(null);
    }//GEN-LAST:event_stiahniNoveButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Vytlačiť do súboru");
        chooser.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
        String mestoAktualne = (String) mestoList.getSelectedValue();
        mestoAktualne = mestoAktualne.substring(0, mestoAktualne.indexOf("(")).trim();
        chooser.setSelectedFile(new File(mestoAktualne + "_" + getAktDatum() + "_export.html"));

        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            // System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory());
            // System.out.println("getSelectedFile() : " + chooser.getSelectedFile());
            try {
                PrintWriter pw = new PrintWriter(chooser.getSelectedFile());
                FileOutputStream fos = new FileOutputStream(chooser.getSelectedFile());
                try {
                    OutputStreamWriter osw = new OutputStreamWriter(fos, "utf-8");

                    String prolog = "<!DOCTYPE html\n"
                            + "PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n"
                            + "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n"
                            + "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"sk\" lang=\"sk\">\n"
                            + "  <head>\n"
                            + "  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n"
                            + "  <meta name=\"description\" content=\"Zoznam vybraných inzerátov\" />\n"
                            + "  <meta name=\"author\" content=\"manazerInzeratov\" />\n"
                            + "  <title>" + mestoAktualne + " " + getAktDatum() + "Zoznam vybraných inzerátov pre mesto: </title>\n"
                            + "  </head>\n"
                            + "  <body>\n"
                            + "  <h1>" + mestoAktualne + " " + getAktDatum() + "</h1>";
                    //pw.println(prolog);
                    osw.write(prolog);
                    //pw.println("skuska export");
                    int count = 0;
                    for (Inzerat i : tableInzeraty) {
                        //pw.println(i);
                        count++;
                        //pw.println("<p><a href=\"" + i.getAktualny_link() + "\" target=\"_blank\">" + count + ".  " + i.getAktualny_link() + "</a></p>");
                        osw.write("<p><a href=\"" + i.getAktualny_link() + "\" target=\"_blank\">" + count + ".  " + i.getAktualny_link() + "</a></p>");
                        i.setOdoslany(true);
                        i.setPocetZobrazeni(i.getPocetZobrazeni() + 1);
                        updateInzeraty(i);
                    }
                    database.updateInzeraty(tableInzeraty);
                    // refresh lebo pribudli nam inzeraty vytlacene
                    refreshCheckboxesNames();
                    //pw.println("  </body>\n" + "</html>");
                    osw.write("  </body>\n" + "</html>");
                    osw.flush();
                    osw.close();
                    // pw.close();
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            //  System.out.println("No Selection ");
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void vytlaceneCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vytlaceneCheckBoxActionPerformed
        refreshTableWithFilters();
    }//GEN-LAST:event_vytlaceneCheckBoxActionPerformed

    private void portalComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portalComboBoxActionPerformed
        String aktPortal = (String) portalComboBox.getSelectedItem();
        int aktPocet = (Integer) pocetPovolenychInzeratovUserSpinner.getValue();
        inzeraty = database.getInzeratyList(aktPortal, aktPocet);
        Collections.sort(inzeraty);
        Collections.reverse(inzeraty);
        refreshMestaList();
    }//GEN-LAST:event_portalComboBoxActionPerformed

    private void videneCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_videneCheckBoxActionPerformed
        refreshTableWithFilters();
    }//GEN-LAST:event_videneCheckBoxActionPerformed

    private void nevideneCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nevideneCheckBoxActionPerformed
        refreshTableWithFilters();
    }//GEN-LAST:event_nevideneCheckBoxActionPerformed

    private void surneCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surneCheckBoxActionPerformed
        refreshTableWithFilters();
    }//GEN-LAST:event_surneCheckBoxActionPerformed

    private void noveCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noveCheckBoxActionPerformed
        if (noveCheckBox.isSelected()) {
            noveDniSpinner.setEnabled(true);
        } else {
            noveDniSpinner.setEnabled(false);
        }
        refreshTableWithFilters();
    }//GEN-LAST:event_noveCheckBoxActionPerformed

    private void noveDniSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_noveDniSpinnerStateChanged
        refreshCheckboxesNames();
    }//GEN-LAST:event_noveDniSpinnerStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MySQLDatabase msd=new MySQLDatabase("","","");
        List<Inzerat> surneInzeraty=msd.getSurneInzeraty();
        System.out.println("velkost surne inzeratov na serveri: "+surneInzeraty.size());
        for (int i=0; i<surneInzeraty.size(); i++){
            if (surneInzeraty.get(i).isSurne()){
                System.out.println("inzerat "+i+" je surne");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cenaLabel;
    private javax.swing.JButton dalsiButton;
    private javax.swing.JButton exportButton;
    private javax.swing.JPanel filtrePanel;
    private javax.swing.JTable inzeratyTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField linkTextField;
    private javax.swing.JLabel lokalitaLabel;
    private javax.swing.JLabel menoLabel;
    private javax.swing.JList mestoList;
    private javax.swing.JButton nacitajInzeratyButton;
    private javax.swing.JLabel nazovLabel;
    private javax.swing.JCheckBox nevideneCheckBox;
    private javax.swing.JCheckBox noveCheckBox;
    private javax.swing.JSpinner noveDniSpinner;
    private javax.swing.JSpinner pocetPovolenychInzeratovUserSpinner;
    private javax.swing.JComboBox portalComboBox;
    private javax.swing.JLabel portalLabel;
    private javax.swing.JButton predchadzajuciButton;
    private javax.swing.JButton stiahniNoveButton;
    private javax.swing.JCheckBox surneCheckBox;
    private javax.swing.JLabel telefonLabel;
    private javax.swing.JTextArea textTextArea;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JCheckBox videneCheckBox;
    private javax.swing.JButton vybavenyButton;
    private javax.swing.JCheckBox vytlaceneCheckBox;
    // End of variables declaration//GEN-END:variables

    private void refreshInzeratyTable(List<Inzerat> inzeraty) {
        int idx = inzeratyTable.getSelectedRow();
        inzeratyTableModel = new InzeratyTableModel(inzeratyTableColumnNames, inzeraty);
        inzeratyTable.setModel(inzeratyTableModel);
        if (idx >= tableInzeraty.size()) {
            inzeratyTable.getSelectionModel().setSelectionInterval(tableInzeraty.size() - 1, tableInzeraty.size() - 1);
        } else {
            if (idx == -1) {
                inzeratyTable.getSelectionModel().setSelectionInterval(0, 0);
            }
            if (idx >= 0) {
                inzeratyTable.getSelectionModel().setSelectionInterval(idx, idx);
            }
        }
        refreshInzeratDisplayed();
        ///spocitajMestaNastavList(inzeraty);

//        polozkyTable.setAutoCreateRowSorter(true);
//        polozkyTable.setUpdateSelectionOnSort(true);
        // {"id","názov", "typ", "stav", "poznámka", "vlastník", "cena"};
        // nazov column
        inzeratyTable.getColumnModel().getColumn(0).setPreferredWidth(200);
//        inzeratyTable.getColumnModel().getColumn(0).setMaxWidth(300);
        // datum column
        inzeratyTable.getColumnModel().getColumn(1).setPreferredWidth(120);
        inzeratyTable.getColumnModel().getColumn(1).setMaxWidth(120);
        // meno column
        inzeratyTable.getColumnModel().getColumn(2).setPreferredWidth(120);
        inzeratyTable.getColumnModel().getColumn(2).setMaxWidth(120);
        // lokalita column
        inzeratyTable.getColumnModel().getColumn(3).setPreferredWidth(150);
        inzeratyTable.getColumnModel().getColumn(3).setMaxWidth(150);
//        // stav column
//        inzeratyTable.getColumnModel().getColumn(3).setPreferredWidth(130);
//        inzeratyTable.getColumnModel().getColumn(3).setMaxWidth(130);
//        // poznámka column
//        inzeratyTable.getColumnModel().getColumn(4).setPreferredWidth(270);
//        // vlastník column
//        inzeratyTable.getColumnModel().getColumn(5).setPreferredWidth(150);
//        // cena column
//        inzeratyTable.getColumnModel().getColumn(6).setPreferredWidth(70);
    }

    private void refreshInzeratDisplayed() {
        if (!tableInzeraty.isEmpty()) {
            Inzerat aktualny = tableInzeraty.get(inzeratyTable.getSelectedRow());
            nazovLabel.setText(aktualny.getNazov());
            portalLabel.setText(aktualny.getPortal());
            textTextArea.setText(aktualny.getText());
            menoLabel.setText(aktualny.getMeno());
            telefonLabel.setText(aktualny.getTelefon());
            linkTextField.setText(aktualny.getAktualny_link());
            lokalitaLabel.setText(aktualny.getLokalita());
            cenaLabel.setText(aktualny.getCena());
            // System.out.println("akt inzerat cas: " + aktualny.getTimeInserted());
        } else {
            nazovLabel.setText("nazov");
            portalLabel.setText("portal");
            textTextArea.setText("");
            menoLabel.setText("meno");
            telefonLabel.setText("telefon");
            linkTextField.setText("");
            lokalitaLabel.setText("lokalita");
            cenaLabel.setText("cena");
        }
    }

//    private String getMacAddress(String macAddress) {
//        InetAddress ip;
//        try {
//            ip = InetAddress.getLocalHost();
//            //System.out.println("Current IP address : " + ip.getHostAddress());
//            NetworkInterface network = NetworkInterface.getByInetAddress(ip);
//            byte[] mac = null;
//            try {
//                mac = network.getHardwareAddress();
//            } catch (SocketException socketException) {
//                JOptionPane.showMessageDialog(rootPane, "Chyba 5689! Obnovte pripojenie k internetu. \n Ak ste pripojení k internetu a stále dostávate túto chybu, \n kontaktujte administrátora");
//                System.exit(0);
//                return "systemExit";
//            }
//            StringBuilder sb = new StringBuilder();
//            for (int i = 0; i < mac.length; i++) {
//                sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? "-" : ""));
//            }
//            System.out.println(sb.toString());
//            macAddress = sb.toString();
//            if (macAddress.length() > 17) {
//                macAddress = "macaddress" + (-1);
//            }
//        } catch (UnknownHostException e) {
//            e.printStackTrace();
//        } catch (SocketException e) {
//            e.printStackTrace();
//        }
//        return macAddress;
//    }

    public void printETATime(long startTime, int pocetInzeratov, int vsetkych) {
        double rychlost = ((System.currentTimeMillis() - startTime) / 1000.0) / pocetInzeratov;
        double etaTime = (vsetkych - pocetInzeratov) * rychlost;
        int hodinE = (int) ((etaTime) / (3600));
        int minutE = (int) ((etaTime) / (60));
        int sekundE = (int) ((etaTime));
        sekundE %= 60;
        minutE %= 60;
        String hodinStringE = "" + hodinE;
        if (hodinE < 10) {
            hodinStringE = "0" + hodinE;
        }
        String minutStringE = "" + minutE;
        if (minutE < 10) {
            minutStringE = "0" + minutE;
        }
        String sekundStringE = "" + sekundE;
        if (sekundE < 10) {
            sekundStringE = "0" + sekundE;
        }
        System.out.println("ETA:" + (hodinStringE + ":" + minutStringE + ":" + sekundStringE));
        //eta = (hodinStringE + ":" + minutStringE + ":" + sekundStringE);
//            System.out.println("etaTime: "+etaTime);
//            System.out.println("rychlost: "+rychlost);
    }

    private void refreshTableWithFilters() {
        tableInzeraty = new ArrayList<Inzerat>();
        String aktMesto = (String) mestoList.getSelectedValue();
        aktMesto = aktMesto.substring(0, aktMesto.indexOf("(")).trim();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date najnovsi = new Date(System.currentTimeMillis());
//        System.out.println("najnovsi: "+sdf.format(najnovsi));
        najnovsi = new Date(najnovsi.getTime() - (najnovsi.getTime() % (1000 * 3600 * 24)) + 1000 * 3600 * 24);
//        System.out.println("najnovsi: "+sdf.format(najnovsi));
        Date aktDate = new Date();
        int pocetDni = (Integer) noveDniSpinner.getValue();
//        System.out.println("akt mesto: " + aktMesto);
        for (Inzerat inz : inzeraty) {
            if (inz.isZaujimavy()) {
                if (inz.getLokalita().contains(aktMesto) || aktMesto.equals("všetky")) {
                    if (surneCheckBox.isSelected() && inz.isSurne()) {
                        tableInzeraty.add(inz);
                        continue;
                    }
                    if (nevideneCheckBox.isSelected() && inz.getPocetZobrazeni() == 0) {
                        tableInzeraty.add(inz);
                        continue;
                    }
                    if (videneCheckBox.isSelected() && inz.getPocetZobrazeni() > 0) {
                        tableInzeraty.add(inz);
                        continue;
                    }
                    if (vytlaceneCheckBox.isSelected() && inz.isOdoslany()) {
                        tableInzeraty.add(inz);
                    }
                    if (noveCheckBox.isSelected()) {
                        try {
                            // spytame sa ci je inzerat v rozmedzi
                            aktDate = sdf.parse(inz.getTimeInserted());
                            long rozdiel = najnovsi.getTime() - aktDate.getTime();
                            if (rozdiel < pocetDni * (1000 * 3600 * 24)) {
                                tableInzeraty.add(inz);
                            }
                        } catch (ParseException ex) {
                            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }
        //       System.out.println("table izneraty size: "+tableInzeraty.size());
        // 3. podla selectnutych filtrov zobraz v tabulke inzeraty
        refreshInzeratyTable(tableInzeraty);
    }

    private void refreshMestaList() {
        Map<String, Integer> poctyMesta = new HashMap<String, Integer>();
        for (Inzerat inz : inzeraty) {
            inz.setSurne(zistiCiJeSurny(inz));
            if (inz.isZaujimavy()) {
                // 1. spocitame mesta kolko maju inzeratov
                String mesto = inz.getLokalita().substring(7).trim();
                if (poctyMesta.containsKey(mesto)) {
                    poctyMesta.put(mesto, poctyMesta.get(mesto) + 1);
                } else {
                    poctyMesta.put(mesto, 1);
                }
            } else {
                //System.out.println("inzerat " + inz + " JE NEZAUJIMAVY");
            }
        }
        // vytiahneme udaje z mapy hodime to do finalneho listu
        mesta = new ArrayList<String>();
        for (String m : poctyMesta.keySet()) {
            mesta.add(m + " (" + poctyMesta.get(m) + ")");
        }
        Collections.sort(mesta);
        int prevSelected = mestoList.getSelectedIndex();
        List<String> m = new ArrayList<String>();
        m.add("všetky (" + inzeraty.size() + ")");
        m.addAll(mesta);
        mesta = m;
        mestoList.setModel(new MestaListModel(mesta));
        if (prevSelected != -1) {
            mestoList.setSelectedIndex(prevSelected);
        } else {
            mestoList.setSelectedIndex(0);
        }
        // mame aktualizovany list miest a pocet inzeratov za jednotlive mesta
        // ideme aktualizovat checkboxy
        refreshCheckboxesNames();
    }

    private void refreshCheckboxesNames() {
        int surne = 0;
        int nove = 0;
        int videne = 0;
        int odoslane = 0;
        int novychDni = 0;
        int pocetDni = (Integer) noveDniSpinner.getValue();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date najnovsi = new Date(System.currentTimeMillis());
//        System.out.println("najnovsi: "+sdf.format(najnovsi));
        najnovsi = new Date(najnovsi.getTime() - (najnovsi.getTime() % (1000 * 3600 * 24)) + 1000 * 3600 * 24);
        //System.out.println("najnovsi: "+sdf.format(najnovsi));
        Date aktDate = new Date();
        String aktMesto = (String) mestoList.getSelectedValue();
        aktMesto = aktMesto.substring(0, aktMesto.indexOf("(")).trim();
        for (Inzerat inz : inzeraty) {
            if (inz.isZaujimavy()) {
                if (inz.getLokalita().contains(aktMesto) || aktMesto.equals("všetky")) {
                    // 2. prepocitaj pocty pre: surne, nove, videne a odoslane
                    // spytame sa ci inzerat obsahuje slova ako surne... TODO
                    if (inz.isSurne()) {
                        surne++;
                    }
                    // spytame sa na pocet zobrazeni
                    if (inz.getPocetZobrazeni() == 0) {
                        nove++;
                    } else {
                        videne++;
                    }
                    // spytame sa na odoslane
                    if (inz.isOdoslany()) {
                        odoslane++;
                    }
                    try {
                        // spytame sa ci je inzerat v rozmedzi
                        aktDate = sdf.parse(inz.getTimeInserted());
                        long rozdiel = najnovsi.getTime() - aktDate.getTime();
                        if (rozdiel < pocetDni * (1000 * 3600 * 24)) {
                            novychDni++;
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }

        surneCheckBox.setText("súrne (" + surne + ")");
        nevideneCheckBox.setText("nevidené (" + nove + ")");
        videneCheckBox.setText("videné (" + videne + ")");
        vytlaceneCheckBox.setText("vytlačené (" + odoslane + ")");
        noveCheckBox.setText("nové x dní (" + novychDni + ")");

        refreshTableWithFilters();
    }

    private void updateInzeraty(Inzerat aktualny) {
        for (Inzerat inz : inzeraty) {
            if (inz.getId() == aktualny.getId()) {
                inz.setOdoslany(aktualny.isOdoslany());
                inz.setPocetZobrazeni(aktualny.getPocetZobrazeni());
                inz.setSurne(aktualny.isSurne());
                inz.setZaujimavy(aktualny.isZaujimavy());
                break;
            }
        }
    }

    private String getAktDatum() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
        return sdf.format(new Date(System.currentTimeMillis()));
    }

    private boolean zistiCiJeSurny(Inzerat hladany) {
        for (Inzerat inz : surneInzeraty) {
            if (inz.getId() == hladany.getId()) {
                return true;
            }
        }
        return false;
    }

}
